<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <description>Shiro 配置</description>

    <!-- 1. 配置SecurityManager -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager" />
        <property name="authenticator" ref="authenticator"/>
        <property name="subjectFactory" ref="subjectFactory"/>
        <property name="subjectDAO.sessionStorageEvaluator" ref="sessionStorageEvaluator"/>
        <!-- 可以配置多个Realm，其实会把realms属性赋值给ModularRealmAuthenticator的realms属性 -->
        <property name="realms">
            <list>
                <ref bean="userRealm" />
                <ref bean="statelessRealm" />
            </list>
        </property>
    </bean>

    <!-- 2. 配置CacheManager -->
    <!-- 2.1 需要加入ehcache的jar包及配置文件 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml" />
    </bean>

    <bean id="subjectFactory" class="com.yyyu.mmall.shiro.auth.mgt.CustomizedDefaultSubjectFactory">
        <constructor-arg ref="sessionStorageEvaluator"/>
    </bean>

    <bean id="sessionStorageEvaluator" class="org.apache.shiro.mgt.DefaultSessionStorageEvaluator"/>

    <!-- 3. 配置Realm -->
    <!-- 3.1 直接配置继承了org.apache.shiro.realm.AuthorizingRealm的bean -->
    <bean id="userRealm" class="com.yyyu.mmall.shiro.auth.realm.UserRealm">
        <!-- 配置密码匹配器 -->
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- 加密算法为MD5 -->
                <property name="hashAlgorithmName" value="MD5"/>
                <!-- 加密次数 -->
                <property name="hashIterations" value="10"/>
            </bean>
        </property>
    </bean>
    <!--3.2无状态relam-->
    <bean id="statelessRealm" class="com.yyyu.mmall.shiro.auth.realm.StatelessRealm">
        <property name="cachingEnabled" value="false"/>
    </bean>

    <!-- 4. 配置LifecycleBeanPostProcessor，可以自定义地来调用配置在Spring IOC容器中shiro bean的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- 5. 使能够在IOC容器中使用shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才可以使用 -->
    <bean
            class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
            depends-on="lifecycleBeanPostProcessor" >
        <property name="proxyTargetClass" value="true" />
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>

    <!--无状态api拦截filter-->
    <bean id="statelessAuthcFilter" class="com.yyyu.mmall.shiro.filter.StatelessAuthcFilter"/>

    <!-- 6. 配置ShiroFilter -->
    <!-- 6.1 id必须和web.xml中配置的DelegatingFilterProxy的<filter-name>一致。 如果不一致，会抛出NoSuchBeanDefinitionException异常，因为shiro会在IOC容器中查找名称和<filter-name>
        值一致的filter bean -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login.jsp" />
        <property name="successUrl" value="/WEB-INF/view/user/userManager.jsp" />
        <property name="unauthorizedUrl" value="/login.jsp" />
        <property name="filters">
            <util:map>
                <entry key="statelessAuthc" value-ref="statelessAuthcFilter"/>
            </util:map>
        </property>
        <!-- 配置哪些页面需要受保护，以及访问这些页面需要的权限 -->
        <property name="filterChainDefinitions">
            <value>
                /api/user/login.action=anon
                /api/user/v1/session/test=anon
                /assert/**=anon
                /login.jsp=anon
                /user/checkUser.action=anon
                /swagger-*/**=anon
                /**/api-docs=anon
                /api/**=anon<!--statelessAuthc-->
                /** =authc <!--authc-->
            </value>
        </property>
    </bean>

    <!-- 7. 配置ModularRealmAuthenticator，可以实现多Realm认证 -->
    <bean id="authenticator" class="com.yyyu.mmall.shiro.auth.pam.CustomizedModularRealmAuthenticator">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息 -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>

</beans>